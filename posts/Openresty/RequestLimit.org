#+TITLE: Openresty限流
#+DATE: 2023-10-20 14:45:30
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: openresty
#+CATEGORIES: API网关

* request-limit.lua
#+begin_src lua
  local limit_req = require "resty.limit.req"

  local M = {}

  function M.limit()
     local auth_header = ngx.var.http_Authorization
     local _, _, token = string.find(auth_header, "Bearer%s+(.+)")

     -- 限制请求速率为每秒x个请求
     -- limit_req.new(key, rate, burst)
     --   key: 是一个内存字典,需要在http中预先定义
     --   rate: x次请求/秒
     --   burst: 突发情况下，其实可以多接收burst次请求
     -- 在http块中,定义: lua_shared_dict my_limit_req_store 10m; 10m表示字典占用的内存空间上限
     local lim, err = limit_req.new("my_limit_req_store", 20, 5) -- 单个用户每秒可以请求25次接口
     if not lim then
        ngx.log(ngx.ERR, "failed to instantiate a resty.limit.req object: ", err)
        return ngx.exit(500)
     end

     -- 如果超过了速率限制，返回 503 错误

     -- 用远端地址做速率限制
     -- local delay, err = lim:incoming(ngx.var.binary_remote_addr, true)

     -- 用用户token做速率限制
     local delay, err = lim:incoming(token, true)

     ngx.log(ngx.INFO, "User incoming return: ", delay, err, "----------")

     if not delay then
        if err == "rejected" then
           return ngx.exit(503)
        end
        ngx.log(ngx.ERR, "failed to limit req: ", err)
        return ngx.exit(500)
     end

     if delay >= 0.001 then
        -- 需要延迟请求
        ngx.sleep(delay)
     end
  end

  return M
#+end_src

* Nginx配置
#+begin_src conf
  server {
      listen 8888;
      server_name api.com;
      default_type text/plain;
      root /home/inmove/www/api;

      # TODO: for test
      lua_code_cache off;

      location /b {

          access_by_lua_block {
              require("request-limit").limit()
          }

          content_by_lua_block {
              ngx.say('test')
          }

          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_set_header X-NginX-Proxy true;
          rewrite /b/(.*) /$1  break;
          proxy_pass http://127.0.0.1:6003;
      }


  }

#+end_src
