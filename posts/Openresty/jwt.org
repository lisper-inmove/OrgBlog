#+TITLE: Openresty中处理jwt
#+DATE: 2023-10-20 14:39:03
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: openresty
#+CATEGORIES: API网关

* jwt.lua
#+begin_src lua
  local cjson = require "cjson"
  local jwt = require "resty.jwt"

  local M = {}


  function M.auth()
     local uri = ngx.var.request_uri
     local check_token_url = "http://127.0.0.1:6003/user/check-token"
     ngx.log(ngx.INFO, "User Request Uri: " .. uri)
     -- 登陆与注册不需要检查token
     local ignores = {"login$", "signup$"}
     for _, ignore in pairs(ignores) do
        if uri:match(ignore) then
           return
        end
     end

     -- 头部必须要有 Authorization
     local auth_header = ngx.var.http_Authorization

     if auth_header == nil then
        ngx.log(ngx.WARN, "No Authorization header")
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
     end
     ngx.log(ngx.INFO, "Authorization: " .. auth_header)

     -- Authorization的值为 'Bearer token-value'
     local _, _, token = string.find(auth_header, "Bearer%s+(.+)")
     if token == nil then
        ngx.log(ngx.WARN, "Missing token")
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
     end
     ngx.log(ngx.INFO, "Authorization: " .. token)

     -- 去后端服务检测该token是否有效
     -- 也可以使用 resty.jwt来直接检测
     local httpc = require("resty.http").new()
     local res, err = httpc:request_uri(check_token_url, {
                                           method="POST",
                                           body='{"1":"1"}',
                                           headers={
                                              ["Content-Type"]="application/json",
                                              token=token
     }})
     local body = cjson.decode(res.body)
     if body.code ~= 0 then
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
     end
     -- token检查有效之后，将用户ID放到请求头，这样其它服务就能直接获取到用户id去处理问题了
     ngx.req.set_header("user_id", body.data.id)
     local headers = ngx.req.get_headers()
     ngx.log(ngx.INFO, "Request Headers: " .. cjson.encode(headers))
     ngx.log(ngx.INFO, "Verify result: " .. res.body)
  end

  return M

#+end_src

* nginx配置
#+begin_src conf
  server {
      listen 8888;
      server_name api.com;
      default_type text/plain;
      root /home/inmove/www/api;

      # TODO: for test
      lua_code_cache off;

      location /b {

          access_by_lua_block {
              require("jwt-verify").auth()
          }

          content_by_lua_block {
              ngx.say('test')
          }

          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_set_header X-NginX-Proxy true;
          rewrite /b/(.*) /$1  break;
          proxy_pass http://127.0.0.1:6003;
      }

  }

#+end_src
