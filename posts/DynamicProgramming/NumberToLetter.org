#+TITLE: 数字转字母
#+DATE: 2023-09-27 19:46:37
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 动态规划
#+CATEGORIES: 动态规划 

* 数字转字母
#+begin_src python
  # 规定1和A对应、2和B对应、3和C对应...26和Z对应
  # 那么一个数字字符串比如”111”就可以转化为:
  # “AAA”、"KA"和”AK
  # 给定一个只有数字字符组成的字符串str，返回有多少种转化结果

  def number_to_string(s):

      def process(s, index):
          if index == len(s):
              return 1
          v = int(s[index])
          if v == 0:
              return 0
          ways = process(s, index + 1)
          if index < len(s) - 1 and int(s[index:index + 2]) < 27:
              ways += process(s, index + 2)
              return ways
          return ways

      return process(s, 0)


  def number_to_string_dp(s):

      dp = [0] * (len(s) + 1)

      dp[len(s)] = 1

      for i in range(len(s) - 1, -1, -1):
          v = int(s[i])
          if v == 0:
              continue
          dp[i] = dp[i + 1]
          if i < len(s) - 1 and int(s[i:i + 2]) < 27:
              dp[i] += dp[i + 2]
      print(dp)
      return dp[0]


  import time

  s = "112234526232498"
  s = "111"
  s = "305"
  s = "2132082"

  start = time.time()
  value = number_to_string(s)
  print(f"递归耗时: {value} -- {time.time() - start}")

  start = time.time()
  value = number_to_string_dp(s)
  print(f"dp耗时: {value} -- {time.time() - start}")

#+end_src
