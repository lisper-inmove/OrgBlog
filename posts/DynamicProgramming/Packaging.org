#+TITLE: 背包问题
#+DATE: 2023-09-27 19:44:55
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 动态规划
#+CATEGORIES: 动态规划 

* 背包问题I
#+begin_src python
  import time

  # w，数组，w[i] 表示第i个物品的重量
  # v，数组，v[i] 表示第i个物品的价值
  # bag, 表示背包的最大容量
  # 返回不超过背包总容量的最大价值

  def maxValue(w, v, bag):
      if (w is None or v is None or len(w) != len(v) or len(w) == 0):
          return 0

      def process(w, v, index, bag):
          if index >= len(w):
              return 0
          if bag < 0:
              return 0
          p1 = process(w, v, index + 1, bag)
          p2 = 0
          if bag >= w[index]:
              p2 = v[index] + process(w, v, index + 1, bag - w[index])
          return max(p1, p2)
      return process(w, v, 0, bag)


  def maxValueDP(w, v, bag):

      def process(w, v, bag):
          dp = [[0] * (bag + 1) for i in range(0, len(w) + 1)]
          for row in range(len(w) - 1, -1, -1):
              for rest in range(0, bag + 1):
                  p1 = dp[row + 1][rest]
                  p2 = 0
                  if rest - w[row] >= 0:
                      p2 = dp[row + 1][rest - w[row]] + v[row]
                  dp[row][rest] = max(p1, p2)
          return dp[0][bag]

      return process(w, v, bag)


  w = [3, 2, 4, 7, 3, 1, 7]
  v = [5, 6, 3, 19, 12, 4, 2]
  bag = 15

  value = maxValue(w, v, bag)
  start = time.time()
  print(f"递归耗时 {value}: {time.time() - start}")

  start = time.time()
  value = maxValueDP(w, v, bag)
  print(f"DP耗时: {value}: {time.time() - start}")

#+end_src
