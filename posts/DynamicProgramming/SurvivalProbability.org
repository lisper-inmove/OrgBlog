#+TITLE: 存活概率
#+DATE: 2023-09-27 19:57:00
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 动态规划
#+CATEGORIES: 动态规划

* 存活概率
#+begin_src python
  # 给定5个参数，N，M，row，col，k
  # 表示在N*M的区域上，醉汉Bob初始在(row,col)位置
  # Bob一共要迈出k步，且每步都会等概率向上下左右四个方向走一个单位
  # 任何时候Bob只要离开N*M的区域，就直接死亡
  # 返回k步之后，Bob还在N*M的区域的概率

  def BobLiveProsibility(N, M, row, col, k):

      def process(N, M, row, col, k):
          if row == N or col == M or row < 0 or col < 0:
              return 0
          if k == 0:
              return 1
          up = process(N, M, row - 1, col, k - 1)
          down = process(N, M, row + 1, col, k - 1)
          left = process(N, M, row, col - 1, k - 1)
          right = process(N, M, row, col + 1, k - 1)
          return up + down + left + right

      return float(process(N, M, row, col, k) / float(4 ** k))

  def BobLiveProsibilityDP(N, M, row, col, k):

      dp = [[[0] * (k + 1) for i in range(0, M + 1)] for j in range(0, N + 1)]

      for i in range(0, N + 1):
          for j in range(0, M + 1):
              dp[i][j][0] = 1

      def helper(dp, i, j, k):
          if i >= N or j >= M or i < 0 or j < 0:
              return 0
          return dp[i][j][k]

      for _k in range(1, k + 1):
          for i in range(0, N + 1):
              for j in range(0, M + 1):
                  dp[i][j][_k] = 0 + \
                      helper(dp, i - 1, j, _k - 1) + \
                      helper(dp, i + 1, j, _k - 1) + \
                      helper(dp, i, j - 1, _k - 1) + \
                      helper(dp, i, j + 1, _k - 1)

      return float(dp[row][col][k] / float(4 ** k))


  if __name__ == '__main__':

      import random
      N = random.randint(10, 20)
      M = random.randint(10, 20)
      row = random.randint(4, 9)
      col = random.randint(5, 10)
      k = random.randint(5, 15)

      print(BobLiveProsibility(N, M, row, col, k))
      print(BobLiveProsibilityDP(N, M, row, col, k))
#+end_src
