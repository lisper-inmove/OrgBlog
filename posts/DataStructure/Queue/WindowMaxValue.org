#+TITLE: 窗口最大值数组
#+DATE: 2023-09-28 00:31:36
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 算法 队列
#+CATEGORIES: 队列

* 生成窗口最大值数组
双端队列头部总是最大值。新的数总是添加到尾部。
1. 添加时，先取出尾部的那个数，与新的数比较，如果取出的数已经过期了(超过窗口了)或者取出的数小于当前数，直接舍弃旧的那个
2. 获取当前最大的数时，直接从头部获取，只是要对比一下它是否过期，如果已过期，那么舍弃它，取下一下，直到取出当前有效最大值
3. 因为总是先put再getMax，所以总是能取到当前最大值的
#+begin_src python
  """
  有一个数组和一个大小为w的窗口。w从最左边滑到最右边，窗口每次滑动一个位置
  如，数组为 [4, 3, 5, 4, 3, 3, 6, 7] w = 3
  [4 3 5] 4 3 3 6 7  # 最大值为 5
  4 [3 5 4] 3 3 6 7  # 5
  4 3 [5 4 3] 3 6 7  # 5
  4 3 5 [4 3 3] 6 7  # 4
  4 3 5 4 [3 3 6] 7  # 6
  4 3 5 4 2 [3 6 7]  # 7
  返回值为 [5, 5, 5, 4, 6, 7]，要求时间复杂度为O(N)，N为数组长度
  """

  from myQueue import DoubleEndQueue

  class WindowMaxValue:

      def process(self, arr, w):
          q = DoubleEndQueue(len(arr))
          result = []
          for i in range(0, len(arr)):
              self.put(q, i, arr, w)
              if i < w - 1:
                  continue
              result.append(arr[self.getMax(q, i, arr, w)])
          return result

      def put(self, q, index, arr, w):
          while not q.isEmpty():
              i = q.peekTail()
              if index - i >= w:
                  q.dequeue()
                  continue
              if arr[i] < arr[index]:
                  q.dequeue()
              else:
                  break
          q.enqueue(index)

      def getMax(self, q, index, arr, w):
          while True:
              curMax = q.peekHead()
              if index - curMax >= w:
                  q.dequeue(tail=False)
              else:
                  return curMax


  if __name__ == '__main__':
      arr = [4, 3, 5, 4, 3, 3, 6, 7]
      w = 3
      print(WindowMaxValue().process(arr, w))

#+end_src
