#+TITLE: 搜索二叉树
#+DATE: 2023-09-28 00:13:27
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 数据结构 搜索二叉树
#+CATEGORIES: 二叉树 数据结构

* 搜索二叉树

搜索二叉树的主要性质在于:
1. 每个结点的左儿子的值一定比它自己小，右儿子的值一定比它自己大。
2. 每颗子树都是二叉搜索树

它有一些缺点:
1. 某些场景下，它会退化成一颗链表的结构。(插入的数据是按顺序的)
2. 不支持随机访问：与数组不同，BST不支持O(1)时间复杂度的随机访问。要访问第k个最小元素，需要O(log n)或更差的时间。

#+begin_src python
  from display_bynary_tree import DisplayTree
  from traversal_binary_tree import inorder, inorderStack
  from traversal_binary_tree import preorder, preorderStack
  from traversal_binary_tree import postorder, postorderStack
  from traversal_binary_tree import levelorderQueue, levelorderTwoStack, levelorderBottom
  from traversal_binary_tree import morrisIn, morrisPre, morrisPost


  class Node:

      def __init__(self, key):
          self.key = key
          self.left = None
          self.right = None

      def __str__(self):
          return f"{self.key}"


  class BinarySearchTree:

      def __init__(self):
          self.root = None

      def insert(self, key):
          if self.root is None:
              self.root = Node(key)
          else:
              self.__insertRecursive(self.root, key)

      def __insertRecursive(self, root, key):
          if root is None:
              return Node(key)
          if root.key > key:
              root.left = self.__insertRecursive(root.left, key)
          else:
              root.right = self.__insertRecursive(root.right, key)
          return root

      def search(self, key):
          result = self.__searchRecursive(self.root, key)
          if result:
              return result
          return None

      def delete(self, key):
          return self.__deleteRecursive(self.root, key)

      def __deleteRecursive(self, root, key):
          if root is None:
              return root
          if key < root.key:
              root.left = self.__deleteRecursive(root.left, key)
          elif key > root.key:
              root.right = self.__deleteRecursive(root.right, key)
          else:
              # 找到了要删除的结点了

              # 待删除的结点没有左儿子
              if root.left is None:
                  return root.right

              # 待删除的结点没有右儿子
              if root.right is None:
                  return root.left

              # 待删除的结点左右儿子都存在，两种方式都可以
              # 1. 找到左儿子上的最大结点
              # 2. 找到右儿子上的最小结点(此处)
              root.key = self.minNode(root.right).key
              root.right = self.__deleteRecursive(root.right, root.key)
          return root

      def minNode(self, root):
          """一颗子树上的最小结点"""
          if root.left is None:
              return root
          current = root
          while current:
              current = current.left
          return current

      def maxNode(self, root):
          if root.right is None:
              return root
          current = root
          while current:
              current = current.right
          return current

      def __searchRecursive(self, root, key):
          if root is None:
              return None
          if root.key == key:
              return root
          if root.key > key:
              return self.__searchRecursive(root.left, key)
          else:
              return self.__searchRecursive(root.right, key)

      def display(self):
          displayer = DisplayTree(self)
          displayer.display()


  def test():
      import random

      tree = BinarySearchTree()

      keyNumber = random.randint(10, 20)

      keys = []
      for i in range(0, keyNumber):
          keys.append(random.randint(10, 100))
      for v in keys:
          tree.insert(v)
      tree.display()

      in0 = inorder(tree.root)
      in1 = inorderStack(tree.root)
      in2 = morrisIn(tree.root)

      pre0 = preorder(tree.root)
      pre1 = preorderStack(tree.root)
      pre2 = morrisPre(tree.root)

      post0 = postorder(tree.root)
      post1 = postorderStack(tree.root)
      post2 = morrisPost(tree.root)

      print(f"中序遍历: {in0}")
      print(f"先序遍历: {pre0}")
      print(f"后序遍历: {post0}")
      print(f"Stack中序遍历: {in1}")
      print(f"Stack先序遍历: {pre1}")
      print(f"Stack后序遍历: {post1}")
      print(f"morris中序: {in2}")
      print(f"morris先序: {pre2}")
      print(f"morris后序: {post2}")
      print(f"中序相等: {in0 == in1 == in2}")
      print(f"前序相等: {pre0 == pre1 == pre2}")
      print(f"后序相等: {post0 == post1 == post2}")


      print(f"查找元素: {tree.search(5)}")
      print(f"查找元素: {tree.search(20)}")

      tree.delete(39)
      print(f"删除一个元素(39)之后(可能不存在)中序遍历: {inorder(tree.root)}")


  if __name__ == '__main__':
      test()
#+end_src
