#+TITLE: AVL树
#+DATE: 2023-09-28 00:14:28
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 数据结构 AVL树
#+CATEGORIES: 二叉树 数据结构

* AVL树
特殊的一种二叉搜索树，除了二叉搜索树的性质外，还有以下几种性质:
1. 平衡性: 任何一个结点的左右子树的高度差都小于2(最多差1)，严格的平衡二叉树。
2. 查找效率: 由于AVL树始终是平衡的，所以在AVL树中执行查找、插入和删除操作的时间复杂度为O(log n)，其中n是树中的节点数
3. 每次插入/删除结点都需要对结点做重新平衡性调整，

#+begin_src python
  class Node:
      def __init__(self, key):
          self.left = None
          self.right = None
          self.key = key
          self.height = 1


  class AVLTree:

      def __init__(self):
          self.root = None

      def insert(self, key):
          self.root = self.__insert(self.root, key)

      def __insert(self, root, key):
          # 1. 正常的BST插入
          if not root:
              return Node(key)
          elif key < root.key:
              root.left = self.__insert(root.left, key)
          else:
              root.right = self.__insert(root.right, key)

          # 2. 更新节点的高度
          root.height = 1 + max(self.__getHeight(root.left), self.__getHeight(root.right))

          # 3. 获取平衡因子，检查是否失衡
          balance = self.__getBalance(root)

          # 4. 如果失衡，进行旋转
          # 左左
          if balance > 1 and key < root.left.key:
              return self.__rightRotate(root)
          # 右右
          if balance < -1 and key > root.right.key:
              return self.__leftRotate(root)
          # 左右
          if balance > 1 and key > root.left.key:
              root.left = self.__leftRotate(root.left)
              return self.__rightRotate(root)
          # 右左
          if balance < -1 and key < root.right.key:
              root.right = self.__rightRotate(root.right)
              return self.__leftRotate(root)

          return root

      def delete(self, key):
          self.root = self.__delete(self.root, key)

      def __delete(self, root, key):
          # 1. 正常的BST删除
          if not root:
              return root
          elif key < root.key:
              root.left = self.__delete(root.left, key)
          elif key > root.key:
              root.right = self.__delete(root.right, key)
          else:
              if root.left is None:
                  return root.right
              elif root.right is None:
                  return root.left
              root.key = self.__minKeyNode(root.right).key
              root.right = self.__delete(root.right, root.key)

          # 2. 更新节点的高度
          root.height = 1 + max(self.__getHeight(root.left), self.__getHeight(root.right))

          # 3. 获取平衡因子，检查是否失衡
          balance = self.__getBalance(root)

          # 4. 如果失衡，进行旋转
          # 左左
          if balance > 1 and self.__getBalance(root.left) >= 0:
              return self.__rightRotate(root)
          # 右右
          if balance < -1 and self.__getBalance(root.right) <= 0:
              return self.__leftRotate(root)
          # 左右
          if balance > 1 and self.__getBalance(root.left) < 0:
              root.left = self.__leftRotate(root.left)
              return self.__rightRotate(root)
          # 右左
          if balance < -1 and self.__getBalance(root.right) > 0:
              root.right = self.__rightRotate(root.right)
              return self.__leftRotate(root)

          return root

      def __minKeyNode(self, root):
          current = root
          while current.left:
              current = current.left
          return current

      def __leftRotate(self, z):
          #       z                    y
          #      / \                  / \
          #     x   y       ->       z   d
          #        / \              / \
          #       c   d            x   c

          y = z.right
          c = y.left
          y.left = z
          z.right = c
          z.height = 1 + max(self.__getHeight(z.left), self.__getHeight(z.right))
          y.height = 1 + max(self.__getHeight(y.left), self.__getHeight(y.right))
          return y

      def __rightRotate(self, z):
          #        z                     y
          #       / \                   / \
          #      y   x      ->         a   z
          #     / \                       / \
          #    a   b                     b   x

          y = z.left
          b = y.right
          y.right = z
          z.left = b
          z.height = 1 + max(self.__getHeight(z.left), self.__getHeight(z.right))
          y.height = 1 + max(self.__getHeight(y.left), self.__getHeight(y.right))
          return y

      def __getHeight(self, root):
          if not root:
              return 0
          return root.height

      def __getBalance(self, root):
          if not root:
              return 0
          return self.__getHeight(root.left) - self.__getHeight(root.right)

      def display(self):
          from display_bynary_tree import DisplayTree
          displayer = DisplayTree(self)
          displayer.display()


  def test():
      import random
      tree = AVLTree()

      keysNumber = random.randint(10, 20)
      keys = []
      for i in range(keysNumber):
          keys.append(random.randint(10, 100))
      for v in keys:
          tree.insert(v)
      tree.display()

  if __name__ == '__main__':
      test()
#+end_src
