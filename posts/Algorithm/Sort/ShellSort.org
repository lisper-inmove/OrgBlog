#+TITLE: 希尔排序
#+DATE: 2023-09-27 21:49:08
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 算法 希尔排序
#+CATEGORIES: 算法 排序

* 希尔排序
#+begin_src python
  def shellSort(arr):
      """
      有数组如下: [3, 9, 8, 4, 5, 6, 7, 11, 12] (gap = 4)


                                           0  1  2  3   4  5  6  7    8
                                          [3, 9, 8, 4] [5, 6, 7, 11] [12] (gap = 4)
         1. (0, 4) -> (3, 5)               3  9  8  4   5  6  7  11   12
         2. (1, 5) -> (9, 6) -> (6, 9)     3  6  8  4   5  9  7  11   12
         3. (2, 6) -> (8, 7) -> (7, 8)     3  6  7  4   5  9  8  11   12
         4. (3, 7) -> (4, 11)              3  6  7  4   5  9  8  11   12
         5. (4, 8) -> (5, 12)              3  6  7  4   5  9  8  11   12
         6. 数组变成了 [3, 6, 7, 4, 5, 9, 8, 11, 12]

                                           0  1   2  3   4  5   6  7    8
                                          [3, 6] [7, 4] [5, 9] [8, 11] [12] (gap = 2)
         1. (0, 2) -> (3, 7)               3  6   7  4   5  9   8  11   12
         2. (1, 3) -> (6, 4) -> (4, 6)     3  4   7  6   5  9   8  11   12
         3. (2, 4) -> (7, 5) -> (5, 7)     3  4   5  6   7  9   8  11   12
         4. (3, 5) -> (6, 9)               3  4   5  6   7  9   8  11   12
         5. (4, 6) -> (5, 8)               3  4   5  6   7  9   8  11   12
         6. (5, 7) -> (9, 11)              3  4   5  6   7  9   8  11   12
         7. (6, 8) -> (8, 12)              3  4   5  6   7  9   8  11   12
         8. 数组变成了 [3, 4, 5, 6, 7, 9, 8, 11, 12]

                                           0   1   2   3   4   5   6   7    8
                                          [3] [4] [5] [6] [7] [9] [8] [11] [12] (gap = 1)
         1. (0, 1) -> (3, 4)               3   4   5   6   7   9   8   11   12
         2. (1, 2) -> (4, 5)               3   4   5   6   7   9   8   11   12
         3. (2, 3) -> (5, 6)               3   4   5   6   7   9   8   11   12
         4. (3, 4) -> (6, 7)               3   4   5   6   7   9   8   11   12
         5. (4, 5) -> (7, 9)               3   4   5   6   7   9   8   11   12
         6. (5, 6) -> (9, 8) -> (8, 9)     3   4   5   6   7   8   9   11   12
         7. (6, 7) -> (9, 11)              3   4   5   6   7   8   9   11   12
         8. (7, 8) -> (11, 12)             3   4   5   6   7   8   9   11   12
         9. 排序完成

      因为对于插入排序来说，如果已经是按要求排好序的，那么时间复杂度将为 O(n)。所以gap = 1的时候，其实是很快的。
      时间复杂度取决于原始数组已排序情况: 一般情况下要好于O(n ^ 2)
      """
      n = len(arr)
      # 初始化间隔为数组长度的一半
      gap = n // 2

      # 当间隔大于0时，继续排序
      while gap > 0:
          for i in range(gap, n):
              temp = arr[i]
              j = i
              # 使用插入排序的思想对间隔为gap的元素进行排序
              while j >= gap and arr[j - gap] > temp:
                  arr[j] = arr[j - gap]
                  j -= gap
              arr[j] = temp
          # 减小间隔
          gap //= 2

      return arr

#+end_src
