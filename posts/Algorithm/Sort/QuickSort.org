#+TITLE: 快速排序
#+DATE: 2023-09-27 21:46:07
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 算法 快速排序
#+CATEGORIES: 算法 排序

* QuickSort
#+begin_src python
  def quickSort(arr):
      """
        将其中一个数作为基准x，将数组拆分为三个问题，大于x(A)，等于x(B)，和小于x(C)
        再对A，C部分做同样的操作。最后将A B C合并得到新的数组

        1. 最好情况，每次都选到最中间的数。O(n log n)
        2. 最坏情况，每次都选到最大(最小)的数。O(n ^ 2)。针对这种情况，使用随机选择pivot。
      """
      if len(arr) <= 1:
          return arr
      pivot = arr[len(arr) // 2]
      left = [x for x in arr if x < pivot]
      middle = [x for x in arr if x == pivot]
      right = [x for x in arr if x > pivot]
      return quickSort(left) + middle + quickSort(right)
#+end_src

#+begin_src python
  def lomutoPartition(arr, low, high):
      """
      选择一个基准元素。两个指针，i，j。其中i用于保存下一个小于等于pivot的数字的索引。j用于遍历
      当arr[j] <= pivot时，就把 arr[j] 与 arr[i + 1]交换位置
      """
      pivot = arr[high]
      i = low - 1
      # 从左向右遍历，把所有比pivot小的，放到最前面
      for j in range(low, high):
          if arr[j] <= pivot:
              i += 1
              arr[i], arr[j] = arr[j], arr[i]
      # 此时i指向最后一个小于pivot的位置
      arr[i + 1], arr[high] = arr[high], arr[i + 1]
      return i + 1

  def hoarePartition(arr, low, high):
      """
      从low开始往后找到第一个比pivot大的数
      从high开始往前找到第一个比pivot小的数
      交换它们的位置
      """
      pivot = arr[low]
      left = low
      right = high
      while True:
          # 从左向右找到第一个大于或等于pivot的元素
          while left < high and arr[left] < pivot:
              left += 1
          # 从右向左找到第一个小于或等于pivot的元素
          while right > low and arr[right] > pivot:
              right -= 1
          # 如果左指针大于或等于右指针，则结束
          if left >= right:
              return right
          # 交换左指针和右指针指向的元素
          arr[left], arr[right] = arr[right], arr[left]
          # 移动指针，为下一次循环做准备
          left += 1
          right -= 1


  def quickSort2(arr):

      if not arr:
          return []
      stack = []
      n = len(arr)
      stack.append((0, n - 1))
      while stack:
          low, high = stack.pop()
          if low < high:
              pivot_index = lomutoPartition(arr, low, high)
              stack.append((low, pivot_index - 1))
              stack.append((pivot_index + 1, high))

      return arr

  def quickSort3(arr, low=None, high=None):
      if low is None and high is None:
          low, high = 0, len(arr) - 1
      if low < high:
          pivot_index = hoarePartition(arr, low, high)
          quickSort3(arr, low, pivot_index)
          quickSort3(arr, pivot_index + 1, high)
      return arr

#+end_src
