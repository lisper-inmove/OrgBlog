#+TITLE: 桶排序
#+DATE: 2023-09-27 21:50:09
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 桶排序 排序
#+CATEGORIES: 算法 排序

* BucketSort
#+begin_src python
  def bucketSort(arr):
      """
      将数字分成若干个桶，将数组分别放入桶中，每个桶排好序，最后再，桶合并。
      数字放入桶的规则: 桶也是一个数组，每个桶中的所有数字要比它把后面的桶的数字要小(从小到大排序)。这样合并后才能保证最后的顺序性。
      最好情况下时间复杂度为 O(n + k)，其中k为桶的个数。
      最坏情况下，所有数字都被放在一个桶中，时间复杂度为 O(n^2)

      首先遍历所有数，放入桶中，时间复杂度为O(n)
      假设有k个桶，因为我们使用的是 insertSort，最坏情况下时间复杂度为O(n ^ 2)，那么单个桶的排序需要 O((n/k) ^ 2)，所有桶则需要 O(n^2/k)
      合并桶需要遍历所桶，所以是 O(k)
      所以桶排序时间复杂度为O(n + n^2/k + k)
      当k = n时，时间复杂度为 O(3n) = O(n)
      当k = 1时，时间复杂度为 O(n^2)
      """

      def insertionSort(arr):
          for i in range(1, len(arr)):
              key = arr[i]
              j = i - 1
              while j >= 0 and key < arr[j]:
                  arr[j + 1] = arr[j]
                  j -= 1
              arr[j + 1] = key
          return arr

      # 1. 创建空桶
      num_buckets = len(arr)
      buckets = [[] for _ in range(num_buckets)]

      # 2. 将元素放入对应的桶中
      max_val, min_val = max(arr), min(arr)
      for num in arr:
          index = int((num - min_val) * (num_buckets - 1) / (max_val - min_val))
          buckets[index].append(num)

      # 3. 对每个桶内的元素进行排序
      for bucket in buckets:
          insertionSort(bucket)

      # 4. 合并桶
      sorted_arr = []
      for bucket in buckets:
          sorted_arr.extend(bucket)

      return sorted_arr
#+end_src
