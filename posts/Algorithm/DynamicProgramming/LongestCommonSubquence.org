#+TITLE: 最长公共子序列
#+DATE: 2023-09-27 19:53:15
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 动态规划
#+CATEGORIES: 动态规划 算法

* 最长公共子序列
#+begin_src python
  # 两个字符串
  # str1: a123bc345def
  # str2: mnp123QRS35z
  # 求最长公共子序列的长度

  def longestCommonSubsequence(s1, s2):
      if len(s1) == 0 or len(s2) == 0:
          return 0
      if s1 is None or s2 is None:
          return 0
      p = 0
      if s1[0] == s2[0]:
          p = 1 + longestCommonSubsequence(s1[1:], s2[1:])
      else:
          p2 = longestCommonSubsequence(s1[1:], s2)
          p3 = longestCommonSubsequence(s1, s2[1:])
          p = max(p2, p3)
      return p

  def longestCommonSubsequence2(s1, s2, i, j):
      if i == 0 and j == 0:
          return 1 if s1[i] == s2[j] else 0
      elif i == 0:
          if s1[i] == s2[j]:
              return 1
          return longestCommonSubsequence2(s1, s2, i, j - 1)
      elif j == 0:
          if s1[i] == s2[j]:
              return 1
          return longestCommonSubsequence2(s1, s2, i - 1, j)
      else:
          p1 = longestCommonSubsequence2(s1, s2, i - 1, j)
          p2 = longestCommonSubsequence2(s1, s2, i, j - 1)
          p3 = longestCommonSubsequence2(s1, s2, i - 1, j - 1) + 1 if s1[i] == s2[j] else 0
          return max(p1, max(p2, p3))

  def longestCommonSubsequenceDP(s1, s2):
      """
      根据上面的递归方法，可以知道
      dp[i][j] 依赖于 dp[i][j - 1], dp[i - 1][j] 和 dp[i - 1][j - 1]
      所以说，需要先填好dp[0][j] 和 dp[i][0
      """
      dp = [[0] * len(s2) for i in range(len(s1))]

      dp[0][0] = 1 if s1[0] == s2[0] else 0

      # 第0行
      for j in range(1, len(s2)):
          if s2[j] == s1[0]:
              dp[0][j] = dp[0][j - 1]

      # 第0列
      for i in range(1, len(s1)):
          if s1[i] == s2[0]:
              dp[i][0] = dp[i - 1][0]

      for i in range(1, len(s1)):
          for j in range(1, len(s2)):
              p1 = dp[i - 1][j]
              p2 = dp[i][j - 1]
              p3 = dp[i - 1][j - 1] + 1 if s1[i] == s2[j] else 0
              dp[i][j] = max(p1, max(p2, p3))
      return dp[len(s1) - 1][len(s2) - 1]



  s1 = "a123bc345def"
  s2 = "mnp123QRS35z"
  print(longestCommonSubsequence(s1, s2))
  print(longestCommonSubsequence2(s1, s2, len(s1) - 1, len(s2) - 1))
  print(longestCommonSubsequenceDP(s1, s2))
#+end_src
