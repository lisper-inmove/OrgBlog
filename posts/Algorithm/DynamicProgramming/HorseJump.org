#+TITLE: 马走棋盘
#+DATE: 2023-09-27 19:55:39
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 动态规划
#+CATEGORIES: 动态规划 算法

* 马走棋盘
#+begin_src python
  # 请同学们自行搜索或者想象一个象棋的棋盘
  # 然后把整个棋盘放入第一象限，棋盘的最左下角是(0,0)位置
  # 那么整个棋盘就是横坐标上9条线、纵坐标上10条线的区域给你三个 参数x，y，k
  # 返回“马”从(0,0)位置出发，必须走k步
  # 最后落在(x, y)上的方法数有多少种?

  def horse_jump(start, dest, k):
      # 当前在 start = (x, y)
      # 目的地是 dest = (a, b)
      # 还能走k步

      # 越界检查
      if start[0] < 0 or start[0] > 9 or start[1] < 0 or start[1] > 8:
          return 0

      if k == 0:
          if (start[0] == dest[0] and start[1] == dest[1]):
              return 1
          return 0

      x, y = start[0], start[1]
      p1 = horse_jump((x + 2, y + 1), dest, k - 1)
      p2 = horse_jump((x + 1, y + 2), dest, k - 1)
      p3 = horse_jump((x - 1, y + 2), dest, k - 1)
      p4 = horse_jump((x - 2, y + 1), dest, k - 1)
      p5 = horse_jump((x - 2, y - 1), dest, k - 1)
      p6 = horse_jump((x - 1, y - 2), dest, k - 1)
      p7 = horse_jump((x + 1, y - 2), dest, k - 1)
      p8 = horse_jump((x + 2, y - 1), dest, k - 1)
      return p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8


  def horse_jump_dp(start, end, k):

      def helper(dp, i, j, k):
          if i < 0 or i > 9 or j < 0 or j > 8:
              return 0
          return dp[i][j][k]

      dp = [[[0] * (k + 1) for i in range(0, 9)] for j in range(0, 10)]

      a, b = end[0], end[1]
      dp[a][b][0] = 1

      for _k in range(1, k + 1):
          for _i in range(0, 10):
              for _j in range(0, 9):
                  dp[_i][_j][_k] = 0 + \
                      helper(dp, _i + 2, _j + 1, _k - 1) + \
                      helper(dp, _i + 1, _j + 2, _k - 1) + \
                      helper(dp, _i - 1, _j + 2, _k - 1) + \
                      helper(dp, _i - 2, _j + 1, _k - 1) + \
                      helper(dp, _i - 2, _j - 1, _k - 1) + \
                      helper(dp, _i - 1, _j - 2, _k - 1) + \
                      helper(dp, _i + 1, _j - 2, _k - 1) + \
                      helper(dp, _i + 2, _j - 1, _k - 1)
      return dp[0][0][k]

  start = (0, 0)
  end = (7, 7)
  k = 10
  print(horse_jump(start, end, k))

  print(horse_jump_dp(start, end, k))

#+end_src
