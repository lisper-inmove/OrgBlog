#+TITLE: 链表
#+DATE: 2023-09-28 00:25:40
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+SUBTITLE: 链表的实现以及一些常见的操作
#+KEYWORDS: LinkedList
#+CATEGORIES: 数据结构

* LinkedList
#+begin_src python
  import random
  from copy import deepcopy

  class Node:

      def __init__(self, value):
          self.value = value
          self.next = None

      def __str__(self):
          result = []
          tmp = self
          visited = {}
          while tmp:
              if visited.get(id(tmp)):
                  break
              visited.update({id(tmp): True})
              result.append(str(tmp.value))
              tmp = tmp.next
          result[0] = f"[{result[0]}]"
          return ",".join(result)


  class LinkedList:

      def __init__(self):
          self.header = Node(-1)
          self.nodeCount = 0

      @property
      def last(self):
          tmp = self.header.next
          while tmp.next:
              tmp = tmp.next
          return tmp

      def append(self, value):
          tmp = self.header
          while tmp.next:
              tmp = tmp.next
          tmp.next = Node(value)
          self.nodeCount += 1
          return tmp.next

      def pop(self):
          tmp = self.header
          if tmp.next is None:
              return None
          prev = self.header
          while tmp.next:
              prev = tmp
              tmp = tmp.next
          prev.next = None
          self.nodeCount -= 1
          return tmp

      def getIndex(self, index):
          """获取下标为index的结点. index 从0开始"""
          tmp = self.header.next
          while index and tmp:
              tmp = tmp.next
              index -= 1
          return tmp

      def removeIndex(self, index):
          """删除下标为index的结点. index 从0开始"""
          tmp = self.header
          prev = self.header
          while index and tmp:
              prev = tmp
              tmp = tmp.next
              index -= 1
          if tmp is None:
              raise Exception("没有你要找的元素")
          nn = tmp.next
          prev.next = nn
          self.nodeCount -= 1
          return tmp

      def insertIndex(self, index, value):
          tmp = self.header
          node = Node(value)
          if index == self.nodeCount:
              return self.append(value)
          if not (-1 < index < self.nodeCount):
              raise Exception(f"请输入 0 ~ {self.nodeCount - 1} 之间的数字")
          if index == 0:
              node.next = self.header.next
              self.header.next = node
          else:
              tmp = self.header.next
              prev = None
              while index:
                  prev = tmp
                  tmp = tmp.next
                  index -= 1
              prev.next = node
              node.next = tmp
          self.nodeCount += 1
          return node

      def getNodeCount(self):
          count = 0
          tmp = self.header.next
          while tmp:
              count += 1
              tmp = tmp.next
          return count

      def traverse(self):
          tmp = self.header.next
          result = []
          visited = {}
          index = 0
          hasCircle = False
          circleEntryIndex = -1
          while tmp:
              if visited.get(id(tmp)) is not None:
                  hasCircle = True
                  circleEntryIndex = visited.get(id(tmp))
                  break
              visited.update({id(tmp): index})
              result.append(str(tmp.value))
              tmp = tmp.next
              index += 1
          r = " -> ".join(result)
          r = f"{r} || [总个数: {self.nodeCount}]"
          if hasCircle:
              r = f"{r}{self.circleTraverseHelper(result, circleEntryIndex)}"
          return r

      def circleTraverseHelper(self, result, circleEntryIndex):
          # 前置空格数量
          prevSpaceCount = (circleEntryIndex) * 6
          # 中间空格数量
          midSpaceCount = (len(result) - circleEntryIndex - 1) * 6
          # 中划线数量
          strikeCount = midSpaceCount
          space1 = " " * prevSpaceCount
          space2 = " " * midSpaceCount
          strike = "-" * (strikeCount // 2)
          strike = f"{strike}<<{strike}"

          s1 = f"{space1}|{space2}|"
          s2 = f"{space1}{strike}"
          result = ["\n", s1, "\n", s2]
          return "".join(result)

      def circle(self, index):
          """ 让该LinkedList成为一个环，环入口点在索引为index的位置
          """
          node = self.getIndex(index)
          tmp = self.header.next
          while tmp.next:
              tmp = tmp.next
          tmp.next = node

      def isEmpty(self):
          return self.nodeCount == 0

      def __str__(self):
          return self.traverse()


  def reverse(l):
      if l.isEmpty():
          return
      n0, n1 = l.header.next, l.header.next.next
      while n1:
          ne = n1.next
          n1.next = l.header.next
          n0.next = ne
          l.header.next = n1
          n1 = ne

  def isPalindrome1(l):
      """判断是否是回文LinkedList
      将LinkedList反转，再与原LinkedList对比
      """
      rl = deepcopy(l)
      reverse(rl)
      n0, n1 = rl.header.next, l.header.next
      while n0 and n1:
          if n0.value != n1.value:
              return False
          n0 = n0.next
          n1 = n1.next
      return True

  def isPalindrome2(l):
      """ 判断是否是回文LinkedList
      将LinkedList入Stack，入到一半开始出Stack，与剩余的LinkedList做对比
      """
      if l.isEmpty():
          return True
      stack = []
      reverseCount = l.nodeCount // 2
      tmp = l.header.next
      while tmp:
          if reverseCount > 0:
              stack.append(tmp)
          if reverseCount == 0 and l.nodeCount % 2 != 0:
              tmp = tmp.next
          if reverseCount <= 0:
              node = stack.pop()
              if node.value != tmp.value:
                  return False
          tmp = tmp.next
          reverseCount -= 1
      return True

  def isPalindrome3(l):
      """ 判断是否是回文LinkedList
      将LinkedList前半部分反转，再和剩余的对比
      """
      if l.nodeCount == 1:
          return True
      if l.nodeCount == 2:
          return l.header.next.value == l.header.next.next.value
      h = Node(-1)
      reverseCount = l.nodeCount // 2
      tmp = l.header.next
      while reverseCount:
          ne = tmp.next
          tmp.next = h.next
          h.next = tmp
          tmp = ne
          reverseCount -= 1
          l.header.next = ne

      tmp = l.header.next
      if l.nodeCount % 2 == 1:
          tmp = tmp.next

      # 保存一下h, 用于恢复LinkedList
      reserved = h.next
      # 跳过临时结点
      h = h.next

      while tmp and h:
          if tmp.value != h.value:
              return False
          tmp, h = tmp.next, h.next

      while reserved:
          ne = reserved.next
          reserved.next = l.header.next
          l.header.next = reserved
          reserved = ne

      return True

  def listPartition(l, pivot):
      """
      将LinkedList划分为三部分 left, middle, right。left的值都小于pivot，middle的值都等于pivot，right的值都大于pivot
      """
      # 用于保存三个部分的头结点
      lh, mh, rh = Node(-1), Node(-1), Node(-1)
      # 用于保存三个部分的尾结点
      lt, mt, rt = lh, mh, rh
      tmp = l.header.next
      while tmp:
          n = tmp.next
          if tmp.value < pivot:
              lt.next = tmp
              lt = lt.next
          elif tmp.value == pivot:
              mt.next = tmp
              mt = mt.next
          else:
              rt.next = tmp
              rt = rt.next
          tmp.next = None
          tmp = n

      lh, mh, rh = lh.next, mh.next, rh.next

      # 将left与middle合并
      if lh is not None:
          lt.next = mh
          mt = mt if mh is not None else lt
      # 合并剩余两部分
      if mt is not None:
          mt.next = rh

      if lh is not None:
          l.header.next = lh
      elif mh is not None:
          l.header.next = mh
      else:
          l.header.next = rh
      return l

  def loopNode(l):
      """ 如果LinkedList是循环的，返回入口点，否则返回None
      """
      slower, faster = l.header.next, l.header.next
      while True:
          faster = faster.next
          slower = slower.next
          if not faster:
              return None
          faster = faster.next
          if faster == slower:
              break

      faster = l.header.next
      while faster != slower:
          faster = faster.next
          slower = slower.next

      return faster

  def intersect(l1, l2, endPoint=None):
      """ 判断两个LinkedList是否相交，如果相交，返回交点，否则返回None
      endPoint: 如果是循环LinkedList，则传参为交点
      """
      h1, h2 = l1.header.next, l2.header.next
      while h1 != h2:
          h1 = h1.next if (h1 and h1 is not endPoint) else l2.header.next
          h2 = h2.next if (h2 and h2 is not endPoint) else l1.header.next
      if h1 is None and h2 is None:
          return None
      return h1

  def intersect2(l1, l2):
      """
      l1 l2 有可能有环
      1. l1, l2 无环时, loop1 = loop2 = None
      2. 只有一个有环时，直接返回None
      3. 有环时
        1. 不相交
        2. 相交
          1. 在环外相交(也包括环入口点)，与无环情况相同
          2. 在环上相交
      """
      loop1 = loopNode(l1)
      loop2 = loopNode(l2)
      if loop1 is None and loop2 is not None:
          return None, None
      if loop2 is None and loop1 is not None:
          return None, None
      # 无环 环外相交的情况
      if loop1 == loop2:
          return intersect(l1, l2, loop1)

      # 环上相交 有环不相交的情况
      # 因为有环，那么从loop1出发，如果能到达 loop2，说明是相交的，否则是不相交的
      tmp = loop1.next
      while tmp != loop1:
          if tmp == loop2:
              return loop1, loop2
          tmp = tmp.next
      return None, None

  def kreverse(l, k):
      """
      将LinkedList每k个一组逆序，最后一组如果不够k个，则不用处理
      """
      if k <= 1:
          return l
      if k > l.nodeCount:
          k = k % (l.nodeCount)
      prev = l.header
      n0, n1 = l.header.next, l.header.next.next
      _k = k - 1
      _reversedCount = 0
      while True:
          ne = n1.next
          n0.next = ne
          n1.next = prev.next
          prev.next = n1
          n1 = ne
          _k -= 1
          if _k == 0:
              _reversedCount += k
              if l.nodeCount - _reversedCount < k:
                  break
              _k = k - 1
              prev = n0
              n0 = ne
              n1 = ne.next

  def createLinkedlistWithRandomValues(
          l=None,
          count=None,
          ordely=False,
          repeatable=True,
          values=None
  ):
      if count is None:
          count = 10
      if l is None:
          l = LinkedList()
      if values is None:
          values = [random.randint(20, 99) for _ in range(count)]
      if not repeatable:
          values = list(set(values))
      if ordely:
          values = sorted(values)
      for value in values:
          l.append(value)
      return l

  def createIntersectLinkedlists(count=None, interIndex=None):
      if count is None:
          count = 10
      if interIndex is None:
          interIndex = count // 2
      values = [random.randint(20, 99) for _ in range(count)]
      l0 = LinkedList()
      l1 = LinkedList()
      for index, value in enumerate(values):
          node = l0.append(value)
          if index < interIndex:
              l1.append(value - 5)
          elif index == interIndex:
              tmp = l1.header.next
              while tmp.next:
                  tmp = tmp.next
              tmp.next = node
      l1.nodeCount = l0.nodeCount
      return l0, l1

  if __name__ == '__main__':
      l0 = createLinkedlistWithRandomValues(ordely=True)
      print(f"构建LinkedList: {l0}")

      print(f"调用Pop: {l0.pop()} -> {l0}")
      print(f"按下标获取元素: {l0.getIndex(7)}")
      print(f"按下标删除元素: {l0.removeIndex(7)} -> {l0}")
      print(f"按下标插入: {l0.insertIndex(0, 13)} -> {l0}")
      print(f"按下标插入: {l0.insertIndex(l0.nodeCount - 1, 14)} -> {l0}")
      print(f"按下标插入: {l0.insertIndex(l0.nodeCount, 15)} -> {l0}")

      reverse(l0)
      print(f"LinkedList反转之后: {l0}")

      palindromeL1 = createLinkedlistWithRandomValues(values=[1, 3, 9, 3, 1])
      palindromeL2 = createLinkedlistWithRandomValues(values=[1, 3, 9, 9, 3, 1])
      notPalindromeL1 = createLinkedlistWithRandomValues(values=[1, 3, 9, 5, 3])
      notPalindromeL2 = createLinkedlistWithRandomValues(values=[1, 3, 9, 5, 3, 4])
      print(f"是否是回文LinkedList1(回文 奇数): {isPalindrome1(palindromeL1)} -> {palindromeL1}")
      print(f"是否是回文LinkedList1(回文 偶数)1: {isPalindrome1(palindromeL2)} -> {palindromeL2}")
      print(f"是否是回文LinkedList1(非回文 奇数): {isPalindrome1(notPalindromeL1)} -> {notPalindromeL1}")
      print(f"是否是回文LinkedList1(非回文 偶数): {isPalindrome1(notPalindromeL2)} -> {notPalindromeL2}")

      print(f"是否是回文LinkedList2(回文 奇数): {isPalindrome2(palindromeL1)} -> {palindromeL1}")
      print(f"是否是回文LinkedList2(回文 偶数)1: {isPalindrome2(palindromeL2)} -> {notPalindromeL2}")
      print(f"是否是回文LinkedList2(非回文 奇数): {isPalindrome2(notPalindromeL1)} -> {notPalindromeL1}")
      print(f"是否是回文LinkedList2(非回文 偶数): {isPalindrome2(notPalindromeL2)} -> {notPalindromeL2}")

      print(f"是否是回文LinkedList3(回文 奇数): {isPalindrome3(palindromeL1)} -> {palindromeL1}")
      print(f"是否是回文LinkedList3(回文 偶数): {isPalindrome3(palindromeL2)} -> {palindromeL2}")
      print(f"是否是回文LinkedList3(非回文 奇数): {isPalindrome3(notPalindromeL1)} -> {notPalindromeL1}")
      print(f"是否是回文LinkedList3(非回文 偶数): {isPalindrome3(notPalindromeL2)} -> {notPalindromeL2}")

      l1 = createLinkedlistWithRandomValues()
      print(f"按pivot划分LinkedList: [{l1.header.next.value}] -> {listPartition(l1, l1.header.next.value)}")

      l2 = createLinkedlistWithRandomValues(count=30)
      l2.circle(5)
      print(f"打印循环LinkedList: \n{l2}")
      print(f"循环入口点: {loopNode(l2)}")

      l3, l4 = createIntersectLinkedlists()
      print(l3)
      print(l4)
      print(f"两个LinkedList是否相交: {intersect(l3, l4)}")

      l5, l6 = createIntersectLinkedlists(count=20)
      l5.circle(13)
      print(l5)
      print(l6)
      print(f"两个循环LinkedList是否相交(环外相交): {intersect2(l5, l6)}")

      l7 = createLinkedlistWithRandomValues(count=20)
      l7.circle(13)
      l8 = createLinkedlistWithRandomValues(count=13)
      l8.last.next = l7.getIndex(18)
      print(l7)
      print(l8)
      l9, l10 = intersect2(l7, l8)
      print(f"两个循环LinkedList是否相交(环内相交): {l9} {l10}")

      l11 = createLinkedlistWithRandomValues(count=10)
      print(f"每k个一组翻转前: {l11}")
      kreverse(l11, 3)
      print(f"每k个一组翻转后: {l11}")
#+end_src
