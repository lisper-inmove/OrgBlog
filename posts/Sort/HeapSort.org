#+TITLE: 堆排序
#+DATE: 2023-09-27 21:49:23
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: Algorithm 堆排序
#+CATEGORIES: 排序

* HeapSort
#+begin_src python
  def heapSort(arr):

      """
      利用大根堆(小根堆)，先将所有数字入堆，再一个一个取出来，就是排好序的了
      时间复杂度为O(n logn)
      """

      def heapify(arr, n, i):
          largest = i  # 初始化最大值为根
          left = 2 * i + 1
          right = 2 * i + 2

          # 如果左子节点存在且大于根
          if left < n and arr[i] < arr[left]:
              largest = left

          # 如果右子节点存在且大于当前最大值
          if right < n and arr[largest] < arr[right]:
              largest = right

          # 如果最大值不是根
          if largest != i:
              arr[i], arr[largest] = arr[largest], arr[i]  # 交换
              heapify(arr, n, largest)  # 递归地调整受影响的子树

      n = len(arr)

      # 构建一个最大堆
      for i in range(n // 2 - 1, -1, -1):
          heapify(arr, n, i)

      # 一个个从堆中取出元素
      for i in range(n - 1, 0, -1):
          arr[i], arr[0] = arr[0], arr[i]  # 交换
          heapify(arr, i, 0)

      return arr
#+end_src
