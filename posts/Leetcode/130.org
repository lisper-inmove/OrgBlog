#+TITLE: 130. 被围绕的区域
#+DATE: 2023-10-22 21:37:38
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 深度优先搜索
#+CATEGORIES: Leetcode
#+DIFFICULTY: Medium

* Solution

遍历方形区域的四条边，只要遇到一个 'O' 就将它变成 'S'，然后再去看它的 上下左右
然后再遍历所有格子，将S变回'O'，将'O'变为 'X'

#+begin_src python
  from typing import List

  class Solution:

      def solve(self, board: List[List[str]]) -> None:
          """
          Do not return anything, modify board in-place instead.
          """
          if len(board) == 0 or len(board[0]) == 0:
              return
          n, m = len(board), len(board[0])
          def dfs(i, j):
              print(f"{i} --> {j}")
              if 0 <= i < n and 0 <= j < m and board[i][j] == 'O':
                  board[i][j] = 'S'
                  list(map(dfs, [i + 1, i - 1, i, i], [j, j, j + 1, j - 1]))
                  # dfs(i + 1, j)
                  # dfs(i - 1, j)
                  # dfs(i, j + 1)
                  # dfs(i, j - 1)

          for i in range(0, n):
              for j in range(0, m):
                  if i == 0 or i == n - 1 or j == 0 or j == m - 1:
                      dfs(i, j)
          print(board)
          for i in range(0, n):
              for j in range(0, m):
                  if board[i][j] == 'S':
                      board[i][j] = 'O'
                  elif board[i][j] == 'O':
                      board[i][j] = 'X'
#+end_src
