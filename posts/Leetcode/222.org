#+TITLE: 222. 完全二叉树的节点个数
#+DATE: 2023-10-21 22:00:29
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+CATEGORIES: Leetcode
#+DIFFICULTY: Medium

* Solution
#+begin_src python
  from typing import Optional

  class TreeNode:
      def __init__(self, val=0, left=None, right=None):
          self.val = val
          self.left = left
          self.right = right

  class Solution:
      def countNodes(self, root: Optional[TreeNode]) -> int:
          if not root:
              return 0
          # h保持为左子树的高度+1
          h = self.height(root)
          nodes = 0
          while root:
              """
              如果右子树的高度为 h - 1，说明左右子树高度是相同的
                            x
                           / \
                          /   \
                         a     b
                        / \   /
                       c   d e
              左子树是一颗完全二叉树，可以直接计算出它的个数
              """
              if self.height(root.right) == h - 1:
                  nodes += 2 ** h
                  root = root.right
              else:
                  """
                  否则左子树就要比右子树高
                            x
                           / \
                          /   \
                         a     b
                        / \
                       c   d
                  右子树是一颗完全二叉树，可以直接计算出它的个数
                  """
                  nodes += 2 ** (h - 1)
                  root = root.left
              h -= 1
          return nodes

      def height(self, node):
          """因为是完全二叉树，所有左子树的个数就是二叉树的高度"""
          return -1 if not node else 1 + self.height(node.left)
#+end_src
