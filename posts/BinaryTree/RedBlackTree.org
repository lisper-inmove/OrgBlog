#+TITLE: 红黑树
#+DATE: 2023-09-28 00:15:14
#+DISPLAY: t
#+STARTUP: indent
#+OPTIONS: toc:10
#+AUTHOR: inmove
#+KEYWORDS: 红黑树Python的实现
#+CATEGORIES: 数据结构


* 红黑树的定义

红黑树是一种自平衡的二叉查找树，其中每个节点都有一个颜色属性：红色或黑色。红黑树的主要特点是：
1. 每个节点或是红色，或是黑色。
2. 根节点是黑色。
3. 每个叶子节点（NIL或空节点）是黑色。
4. 如果一个节点是红色，那么它的两个子节点都是黑色。
5. 对于每个节点，从该节点到其所有后代叶子节点的简单路径上，均包含相同数目的黑色节点。

* 红黑树的Python实现
#+begin_src python
  # -*- coding: utf-8 -*-

  import random
  from enum import Enum

  from display_bynary_tree import DisplayTree
  from display_bynary_tree import Bcolors

  MINIMUM = -999

  class Color(Enum):
      RED = 1
      BLACK = 2

  class RBNode:

      def __init__(self):
          self.left = None
          self.right = None
          self.parent = None
          self._key = MINIMUM
          self.color = Color.RED
          self.insert_number = 0

      @property
      def key(self):
          return self._key

      @key.setter
      def key(self, key):
          self._key = key

      @property
      def color_key(self):
          if self.color == Color.RED:
              color_key = Bcolors.red_value(self._key)
          else:
              color_key = Bcolors.green_value(self._key)
          return color_key

      @color_key.setter
      def color_key(self, color):
          pass

      @property
      def grandparent(self):
          if self.parent is None:
              return None
          return self.parent.parent


  class RBTree:

      root = None

      def __init__(self):
          self.NIL = RBNode()
          self.NIL.color = Color.BLACK

      def minimum(self, node):
          """ 以node为根的最小值所指向的结点
          """
          while node.left is not self.NIL:
              node = node.left
          return node

      def maximum(self, node):
          """ 返回以当前结点为根的最大值所指向的结点
          """
          while node.right is not self.NIL:
              node = node.right
          return node

      def insert(self, key):
          node = self.create_node(key)
          if self.root is None:
              self.root = node
          else:
              tmp = self.root
              while True:
                  if tmp.key < node.key:
                      if tmp.right == self.NIL:
                          tmp.right = node
                          node.parent = tmp
                          break
                      tmp = tmp.right
                  else:
                      if tmp.left == self.NIL:
                          tmp.left = node
                          node.parent = tmp
                          break
                      tmp = tmp.left
          self.insert_fixup(node)

      def insert_fixup(self, node):
          """

          1. n: 也就是node
          2. p: n的父结点
          3. u: n的叔叔结点
          4. g: n的爷爷结点

          要插入的结点一定为红色,因为这样只有可能违反2,4规则
          新的结点插入之后如果违反了红黑树的性质,需要做旋转或者重新着色进行调整，以继续满足5条性质
          对于插入的新结点，会有以下几种情况：
          a). 插入到根结点,只需要改变结点颜色为黑色就可以了(违反了规则2)
          b). 如果p是黑色的,什么都不需要做
          c). 如果p是红色,违反了规则4
            1. 如果有红色u,那么把u和p设置为黑色,然后把g设置为红色,然后对g从第a步开始调整
            2. 如果有黑色的u,或者u是NIL(也就是不存在)
              1). 如果 n.is_right_child && p.is_left_child
                1. 对p做左旋(交换了n,p的父子关系)
                2. p.color <= BLACK && g.color <= RED
                3. 对g做右旋(交换了p,g的父子关系)
              2). 如果 n.is_left_child && p.is_right_child
                1. 对p做右旋(交换了n,p的父子关系)
                2. p.color <= BLACK && g.color <= RED
                3. 对p做左旋
              3). 如果 n.is_left_child && p.is_left_child
                1. p.color <= BLACK && g.color <= RED
                2. 对p做右旋
              4). 如果 n.is_right_child && p.is_right_child
                1. p.color <= BLACK && g.color <= RED
                2. 对p做左旋
          """

          # 这里p是红色的，那么g一定是黑色的
          while node.parent != self.NIL and node.parent.color == Color.RED:

              if node.grandparent.left.color == Color.RED and \
                 node.grandparent.right.color == Color.RED:
                  # u是红色的
                  node.grandparent.left.color = Color.BLACK
                  node.grandparent.right.color = Color.BLACK
                  node.grandparent.color = Color.RED
                  node = node.grandparent
                  continue

              if node.parent == node.grandparent.left:
                  # 这里其实包含了两种情况
                  # 左右与左左
                  if node == node.parent.right:
                      node = node.parent
                      self.left_rotate(node)
                  node.parent.color = Color.BLACK
                  node.grandparent.color = Color.RED
                  self.right_rotate(node.grandparent)
              else:
                  # 右左与右右
                  if node == node.parent.left:
                      node = node.parent
                      self.right_rotate(node)
                  node.parent.color = Color.BLACK
                  node.grandparent.color = Color.RED
                  self.left_rotate(node.grandparent)
          self.root.color = Color.BLACK

      def __transplant(self, u, v):
          """ 把v放到u所在的位置,使u处于游离状态
          """
          if u.parent == self.NIL:
              self.root = v
          else:
              if u == u.parent.left:
                  u.parent.left = v
              else:
                  u.parent.right = v
          v.parent = u.parent

      def delete_fixup(self, orig_color, node):
          """
          情况1： 被删除的节点是红色。
          解决方法：直接删除，不会违反红黑树的性质。

          情况2： 被删除的节点是黑色，并且它的一个红色子节点成为了替代节点。
          解决方法：直接删除并用其红色子节点替代，然后将替代节点染成黑色。

          情况3： 被删除的节点是黑色，并且它的子节点也是黑色。
            这是最复杂的情况，因为删除后会在该位置产生一个“双黑”节点。需要进行以下调整：

            a. 情况3.1: 兄弟节点是红色(此时父节点和兄弟节点的子节点都是黑色)。
              解决方法: 对父节点进行左旋或右旋，并交换父节点和兄弟节点的颜色。这会将原问题转化为情况3.2或3.3。
            b. 情况3.2: 兄弟节点是黑色，且它的两个子节点都是黑色。
              解决方法: 将兄弟节点染成红色，将“双黑”上移至父节点。
            c. 情况3.3: 兄弟节点是黑色，它的远离“双黑”节点的子节点是红色，而靠近“双黑”节点的子节点是黑色。
              解决方法: 对兄弟节点进行左旋或右旋，并交换兄弟节点及其红色子节点的颜色。这会将原问题转化为情况3.4。
            d. 情况3.4: 兄弟节点是黑色，而靠近“双黑”节点的子节点是红色。
              解决方法: 对父节点进行左旋或右旋，将兄弟节点染成父节点的颜色，将父节点和兄弟节点的红色子节点染成黑色。
          """

          if orig_color == Color.RED:
              return

          while node != self.root and node.color == Color.BLACK:
              # 如果node是黑色且不是根结点
              if node == node.parent.left:
                  w = node.parent.right
                  # 情景一
                  if w.color == Color.RED:
                      w.color = Color.BLACK
                      node.parent.color = Color.RED
                      self.left_rotate(node.parent)
                      w = node.parent.right
                  # 情景二
                  if w.left.color == Color.BLACK and w.right.color == Color.BLACK:
                      w.color = Color.RED
                      node = node.parent
                  else:
                      # 情景三
                      if w.right.color == Color.BLACK:
                          w.left.color = Color.BLACK
                          w.color = Color.RED
                          self.right_rotate(w)
                          w = node.parent.right
                      # 情景四
                      w.color = node.parent.color
                      node.parent.color = Color.BLACK
                      w.right.color = Color.BLACK
                      self.left_rotate(node.parent)
                      node = self.root
              else:
                  w = node.parent.left
                  if w.color == Color.RED:
                      w.color = Color.BLACK
                      node.parent.color = Color.RED
                      self.right_rotate(node.parent)
                      w = node.parent.left
                  if w.right.color == Color.BLACK and w.left.color == Color.BLACK:
                      w.color = Color.RED
                      node = node.parent
                  else:
                      if w.left.color == Color.BLACK:
                          w.right.color = Color.BLACK
                          w.color = Color.RED
                          self.left_rotate(w)
                          w = node.parent.left
                      w.color = node.parent.color
                      node.parent.color = Color.BLACK
                      w.left.color = Color.BLACK
                      self.right_rotate(node.parent)
                      node = self.root
          node.color = Color.BLACK

      def delete(self, key):
          node = self.search(key)
          if node is None:
              return
          orig_color = node.color

          if node.left == self.NIL:
              # 删除的结点最多只有一个右结点
              x = node.right
              self.__transplant(node, node.right)
          elif node.right == self.NIL:
              # 删除的结点最多只有一个左结点
              x = node.left
              self.__transplant(node, node.left)
          else:
              # 待删除结点的直接后继(直接前驱也可以)，
              # node右儿子最小值的结点，这个successor一定没有左儿子
              successor = self.minimum(node.right)
              orig_color = successor.color
              x = successor.right
              if successor.parent == node:
                  x.parent = successor
              else:
                  # 如果successor不是node的儿子
                  # 需要用successor的右儿子代替successor(这里successor不可能有左儿子),此时successor处于游离态
                  self.__transplant(successor, successor.right)
                  successor.right = node.right
                  successor.right.parent = successor
              self.__transplant(node, successor)
              successor.left = node.left
              successor.left.parent = successor
              successor.color = node.color

          self.delete_fixup(orig_color, x)

      def left_rotate(self, node):
          # node与它的右儿子做旋转
          #    node               x
          #    /  \              / \
          #   a    x   =====>  node c
          #       / \          /  \
          #      b   c        a    b

          x = node.right
          b = x.left

          x.left = node
          node.right = b
          if b != self.NIL:
              b.parent = node
          x.parent = node.parent
          if x.parent != self.NIL:
              if node.parent.left == node:
                  node.parent.left = x
              else:
                  node.parent.right = x
          else:
              self.root = x
          node.parent = x

      def right_rotate(self, node):
          # node与它的左儿子做旋转
          #     node              x
          #     /  \             / \
          #    x    a =======>  b  node
          #   / \                  /  \
          #  b   c                c    a

          x = node.left
          c = x.right

          x.right = node
          node.left = c
          if c != self.NIL:
              c.parent = node
          x.parent = node.parent
          if x.parent != self.NIL:
              if node.parent.left == node:
                  node.parent.left = x
              else:
                  node.parent.right = x
          else:
              self.root = x
          node.parent = x

      def create_node(self, key):
          node = RBNode()
          node.key = key
          node.parent = self.NIL
          node.left = self.NIL
          node.right = self.NIL
          return node

      def search(self, key):
          tmp = self.root
          while True:
              if tmp.key == key:
                  return tmp
              if tmp.key < key:
                  tmp = tmp.right
              else:
                  tmp = tmp.left
              if tmp == self.NIL:
                  return None
          return None

      def black_height(self, node):
          if node == self.NIL:
              return 0
          height = 0
          if node.color == Color.BLACK:
              height = 1
          left_height = self.black_height(node.left) + height
          right_height = self.black_height(node.right) + height
          if left_height != right_height:
              raise Exception(f"{node} {left_height} != {right_height}")
          return left_height

      def has_red_child(self, node):
          if node == self.NIL:
              return
          if node.color == Color.RED:
              if node.left.color == Color.RED:
                  raise Exception(f"{node} {node.left}")
              if node.right.color == Color.RED:
                  raise Exception(f"{node} {node.right}")
          self.has_red_child(node.left)
          self.has_red_child(node.right)

      def is_real_red_black_tree(self):
          if self.root.color != Color.BLACK:
              raise Exception("根不是黑色结点")
          self.black_height(self.root)
          self.has_red_child(self.root)


  class Tester:

      def __init__(self, tree):
          self.tree = tree
          self._key_max = 200

      def init_by_random(self, count):
          for i in range(0, count):
              key = random.randint(1, self._key_max)
              self.tree.insert(key)

      def delete_by_random(self, count):
          for i in range(0, count):
              key = random.randint(1, self._key_max)
              self.tree.delete(key)


  if __name__ == '__main__':

      for i in range(0, 100):
          tree = RBTree()
          displayer = DisplayTree(tree)
          tester = Tester(tree=tree)

          tester.init_by_random(count=20)
          displayer.display()
          tester.tree.is_real_red_black_tree()

          tester.delete_by_random(5)
          displayer.display()
          tester.tree.is_real_red_black_tree()
#+end_src
